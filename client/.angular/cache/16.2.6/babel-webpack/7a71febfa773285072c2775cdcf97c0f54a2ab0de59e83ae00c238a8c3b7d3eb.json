{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction FindingsComponent_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const deity_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", deity_r2.name, \" \");\n  }\n}\nfunction FindingsComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, FindingsComponent_div_6_div_1_Template, 2, 1, \"div\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.results.deities);\n  }\n}\nexport class FindingsComponent {\n  constructor(http) {\n    this.http = http;\n    this.searchQuery = '';\n  }\n  onSearch() {\n    if (!this.searchQuery.trim()) {\n      alert('Blank search');\n      return;\n    }\n    this.http.get('http://localhost:3000/api/search?q=' + this.searchQuery).subscribe(data => {\n      this.results = data;\n      if (!Object.values(this.results).some(arr => arr.length)) {\n        alert('Data not present');\n      }\n    }, error => {\n      console.error('Search failed', error);\n    });\n  }\n  static #_ = this.ɵfac = function FindingsComponent_Factory(t) {\n    return new (t || FindingsComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FindingsComponent,\n    selectors: [[\"app-findings\"]],\n    decls: 7,\n    vars: 2,\n    consts: [[1, \"container\"], [\"type\", \"text\", \"placeholder\", \"Enter search query...\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function FindingsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Search Wonders & Beyond\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function FindingsComponent_Template_input_ngModelChange_3_listener($event) {\n          return ctx.searchQuery = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function FindingsComponent_Template_button_click_4_listener() {\n          return ctx.onSearch();\n        });\n        i0.ɵɵtext(5, \"Search\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(6, FindingsComponent_div_6_Template, 2, 1, \"div\", 3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.searchQuery);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.results);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","deity_r2","name","ɵɵtemplate","FindingsComponent_div_6_div_1_Template","ɵɵproperty","ctx_r0","results","deities","FindingsComponent","constructor","http","searchQuery","onSearch","trim","alert","get","subscribe","data","Object","values","some","arr","length","error","console","_","ɵɵdirectiveInject","i1","HttpClient","_2","selectors","decls","vars","consts","template","FindingsComponent_Template","rf","ctx","ɵɵlistener","FindingsComponent_Template_input_ngModelChange_3_listener","$event","FindingsComponent_Template_button_click_4_listener","FindingsComponent_div_6_Template"],"sources":["C:\\Users\\pedga\\OneDrive\\Desktop\\Test\\wondersnbeyond\\client\\src\\app\\findings\\findings.component.ts","C:\\Users\\pedga\\OneDrive\\Desktop\\Test\\wondersnbeyond\\client\\src\\app\\findings\\findings.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-findings',\n  templateUrl: './findings.component.html',\n  styleUrls: ['./findings.component.css']\n})\nexport class FindingsComponent {\n  searchQuery: string = '';\n  results: any;\n\n  constructor(private http: HttpClient) {}\n\n  onSearch() {\n    if (!this.searchQuery.trim()) {\n      alert('Blank search');\n      return;\n    }\n\n    this.http.get('http://localhost:3000/api/search?q=' + this.searchQuery).subscribe(\n      (data) => {\n        this.results = data;\n        if (!Object.values(this.results).some(arr => arr.length)) {\n          alert('Data not present');\n        }\n      },\n      (error) => {\n        console.error('Search failed', error);\n      }\n    );\n  }\n}\n","<div class=\"container\">\n    <h2>Search Wonders & Beyond</h2>\n    <input type=\"text\" [(ngModel)]=\"searchQuery\" placeholder=\"Enter search query...\">\n    <button (click)=\"onSearch()\">Search</button>\n  \n    <div *ngIf=\"results\">\n      <!-- Display your results here. This is just a basic example. -->\n      <div *ngFor=\"let deity of results.deities\">\n        {{ deity.name }}\n        <!-- Add other deity details here -->\n      </div>\n      <!-- Do the same for beyonds, potions, and spells -->\n    </div>\n  </div>\n  "],"mappings":";;;;;;ICOMA,EAAA,CAAAC,cAAA,UAA2C;IACzCD,EAAA,CAAAE,MAAA,GACA;IACFF,EAAA,CAAAG,YAAA,EAAM;;;;IAFJH,EAAA,CAAAI,SAAA,GACA;IADAJ,EAAA,CAAAK,kBAAA,MAAAC,QAAA,CAAAC,IAAA,MACA;;;;;IAJJP,EAAA,CAAAC,cAAA,UAAqB;IAEnBD,EAAA,CAAAQ,UAAA,IAAAC,sCAAA,iBAGM;IAERT,EAAA,CAAAG,YAAA,EAAM;;;;IALmBH,EAAA,CAAAI,SAAA,GAAkB;IAAlBJ,EAAA,CAAAU,UAAA,YAAAC,MAAA,CAAAC,OAAA,CAAAC,OAAA,CAAkB;;;ADC/C,OAAM,MAAOC,iBAAiB;EAI5BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHxB,KAAAC,WAAW,GAAW,EAAE;EAGe;EAEvCC,QAAQA,CAAA;IACN,IAAI,CAAC,IAAI,CAACD,WAAW,CAACE,IAAI,EAAE,EAAE;MAC5BC,KAAK,CAAC,cAAc,CAAC;MACrB;;IAGF,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAC,qCAAqC,GAAG,IAAI,CAACJ,WAAW,CAAC,CAACK,SAAS,CAC9EC,IAAI,IAAI;MACP,IAAI,CAACX,OAAO,GAAGW,IAAI;MACnB,IAAI,CAACC,MAAM,CAACC,MAAM,CAAC,IAAI,CAACb,OAAO,CAAC,CAACc,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,MAAM,CAAC,EAAE;QACxDR,KAAK,CAAC,kBAAkB,CAAC;;IAE7B,CAAC,EACAS,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACvC,CAAC,CACF;EACH;EAAC,QAAAE,CAAA,G;qBAvBUjB,iBAAiB,EAAAd,EAAA,CAAAgC,iBAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAjBrB,iBAAiB;IAAAsB,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCR9B1C,EAAA,CAAAC,cAAA,aAAuB;QACfD,EAAA,CAAAE,MAAA,8BAAuB;QAAAF,EAAA,CAAAG,YAAA,EAAK;QAChCH,EAAA,CAAAC,cAAA,eAAiF;QAA9DD,EAAA,CAAA4C,UAAA,2BAAAC,0DAAAC,MAAA;UAAA,OAAAH,GAAA,CAAA1B,WAAA,GAAA6B,MAAA;QAAA,EAAyB;QAA5C9C,EAAA,CAAAG,YAAA,EAAiF;QACjFH,EAAA,CAAAC,cAAA,gBAA6B;QAArBD,EAAA,CAAA4C,UAAA,mBAAAG,mDAAA;UAAA,OAASJ,GAAA,CAAAzB,QAAA,EAAU;QAAA,EAAC;QAAClB,EAAA,CAAAE,MAAA,aAAM;QAAAF,EAAA,CAAAG,YAAA,EAAS;QAE5CH,EAAA,CAAAQ,UAAA,IAAAwC,gCAAA,iBAOM;QACRhD,EAAA,CAAAG,YAAA,EAAM;;;QAXeH,EAAA,CAAAI,SAAA,GAAyB;QAAzBJ,EAAA,CAAAU,UAAA,YAAAiC,GAAA,CAAA1B,WAAA,CAAyB;QAGtCjB,EAAA,CAAAI,SAAA,GAAa;QAAbJ,EAAA,CAAAU,UAAA,SAAAiC,GAAA,CAAA/B,OAAA,CAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}