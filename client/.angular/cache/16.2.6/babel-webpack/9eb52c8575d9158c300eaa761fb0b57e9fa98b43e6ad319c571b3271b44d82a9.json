{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nexport let AuthGuard = class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    console.log('AuthGuard canActivate() called');\n    if (this.authService.isLoggedIn()) {\n      console.log('User is logged in');\n      return true;\n    } else {\n      console.log('User is not logged in, redirecting to /login');\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n};\nAuthGuard = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthGuard);","map":{"version":3,"names":["Injectable","AuthGuard","constructor","authService","router","canActivate","console","log","isLoggedIn","navigate","__decorate","providedIn"],"sources":["C:\\Users\\pedga\\OneDrive\\Desktop\\Test\\wondersnbeyond\\client\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): boolean {\n    console.log('AuthGuard canActivate() called');\n    if (this.authService.isLoggedIn()) {\n      console.log('User is logged in');\n      return true;\n    } else {\n      console.log('User is not logged in, redirecting to /login');\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n  \n}\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAOnC,WAAMC,SAAS,GAAf,MAAMA,SAAS;EAEpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,WAAWA,CAAA;IACTC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAC7C,IAAI,IAAI,CAACJ,WAAW,CAACK,UAAU,EAAE,EAAE;MACjCF,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAChC,OAAO,IAAI;KACZ,MAAM;MACLD,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;MAC3D,IAAI,CAACH,MAAM,CAACK,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAEhB;CAED;AAhBYR,SAAS,GAAAS,UAAA,EAHrBV,UAAU,CAAC;EACVW,UAAU,EAAE;CACb,CAAC,C,EACWV,SAAS,CAgBrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}