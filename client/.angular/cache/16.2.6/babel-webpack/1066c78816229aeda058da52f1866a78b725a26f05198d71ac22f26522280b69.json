{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let RegisterComponent = class RegisterComponent {\n  constructor(router, authService // Inject the AuthService\n  ) {\n    this.router = router;\n    this.authService = authService;\n    this.username = '';\n    this.email = '';\n    this.password = '';\n    this.firstName = '';\n    this.lastName = '';\n  }\n  isValidPassword(password) {\n    const regex = /^(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d]{6,}$/;\n    return regex.test(password);\n  }\n  onSubmit() {\n    if (!this.username.trim()) {\n      alert('Username cannot be blank!');\n      return;\n    }\n    if (!this.email.trim()) {\n      alert('Email cannot be blank!');\n      return;\n    }\n    if (!this.password.trim()) {\n      alert('Password cannot be blank!');\n      return;\n    }\n    if (!this.firstName.trim()) {\n      alert('First Name cannot be blank!');\n      return;\n    }\n    if (!this.lastName.trim()) {\n      alert('Last Name cannot be blank!');\n      return;\n    }\n    if (!this.password.trim()) {\n      alert('Password cannot be blank!');\n      return;\n    }\n    if (!this.isValidPassword(this.password)) {\n      alert('Password must be at least 6 characters long, contain at least one uppercase letter, and one number.');\n      return;\n    }\n    const user = {\n      username: this.username,\n      email: this.email,\n      password: this.password,\n      firstName: this.firstName,\n      lastName: this.lastName\n    };\n    // Use the authService to register the user\n    this.authService.register(user).subscribe(response => {\n      console.log('User registered successfully', response);\n      this.router.navigate(['/login']);\n    }, error => {\n      console.error('Registration failed:', error);\n      // Optionally, you can add detailed error messages based on the error returned from the API.\n    });\n  }\n};\n\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);","map":{"version":3,"names":["Component","RegisterComponent","constructor","router","authService","username","email","password","firstName","lastName","isValidPassword","regex","test","onSubmit","trim","alert","user","register","subscribe","response","console","log","navigate","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\pedga\\OneDrive\\Desktop\\Test\\wondersnbeyond\\client\\src\\app\\register\\register.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service'; // Import the AuthService\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  username: string = '';\n  email: string = '';\n  password: string = '';\n  firstName: string = '';\n  lastName: string = '';\n\n  constructor(\n    private router: Router,\n    private authService: AuthService // Inject the AuthService\n  ) {}\n\n  isValidPassword(password: string): boolean {\n    const regex = /^(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d]{6,}$/;\n    return regex.test(password);\n  }\n  \n\n  onSubmit() {\n    if (!this.username.trim()) {\n      alert('Username cannot be blank!');\n      return;\n    }\n    if (!this.email.trim()) {\n      alert('Email cannot be blank!');\n      return;\n    }\n    if (!this.password.trim()) {\n      alert('Password cannot be blank!');\n      return;\n    }\n    if (!this.firstName.trim()) {\n      alert('First Name cannot be blank!');\n      return;\n    }\n    if (!this.lastName.trim()) {\n      alert('Last Name cannot be blank!');\n      return;\n    }\n    if (!this.password.trim()) {\n      alert('Password cannot be blank!');\n      return;\n    }\n    if (!this.isValidPassword(this.password)) {\n      alert('Password must be at least 6 characters long, contain at least one uppercase letter, and one number.');\n      return;\n    }\n    \n    const user = {\n      username: this.username,\n      email: this.email,\n      password: this.password,\n      firstName: this.firstName,\n      lastName: this.lastName\n    };\n\n    // Use the authService to register the user\n    this.authService.register(user).subscribe(\n      response => {\n        console.log('User registered successfully', response);\n        this.router.navigate(['/login']);\n      },\n      error => {\n        console.error('Registration failed:', error);\n        // Optionally, you can add detailed error messages based on the error returned from the API.\n      }\n    );\n  }\n}"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AASlC,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAO5BC,YACUC,MAAc,EACdC,WAAwB,CAAC;EAAA,E;IADzB,KAAAD,MAAM,GAANA,MAAM;IACN,KAAAC,WAAW,GAAXA,WAAW;IARrB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,SAAS,GAAW,EAAE;IACtB,KAAAC,QAAQ,GAAW,EAAE;EAKlB;EAEHC,eAAeA,CAACH,QAAgB;IAC9B,MAAMI,KAAK,GAAG,qCAAqC;IACnD,OAAOA,KAAK,CAACC,IAAI,CAACL,QAAQ,CAAC;EAC7B;EAGAM,QAAQA,CAAA;IACN,IAAI,CAAC,IAAI,CAACR,QAAQ,CAACS,IAAI,EAAE,EAAE;MACzBC,KAAK,CAAC,2BAA2B,CAAC;MAClC;;IAEF,IAAI,CAAC,IAAI,CAACT,KAAK,CAACQ,IAAI,EAAE,EAAE;MACtBC,KAAK,CAAC,wBAAwB,CAAC;MAC/B;;IAEF,IAAI,CAAC,IAAI,CAACR,QAAQ,CAACO,IAAI,EAAE,EAAE;MACzBC,KAAK,CAAC,2BAA2B,CAAC;MAClC;;IAEF,IAAI,CAAC,IAAI,CAACP,SAAS,CAACM,IAAI,EAAE,EAAE;MAC1BC,KAAK,CAAC,6BAA6B,CAAC;MACpC;;IAEF,IAAI,CAAC,IAAI,CAACN,QAAQ,CAACK,IAAI,EAAE,EAAE;MACzBC,KAAK,CAAC,4BAA4B,CAAC;MACnC;;IAEF,IAAI,CAAC,IAAI,CAACR,QAAQ,CAACO,IAAI,EAAE,EAAE;MACzBC,KAAK,CAAC,2BAA2B,CAAC;MAClC;;IAEF,IAAI,CAAC,IAAI,CAACL,eAAe,CAAC,IAAI,CAACH,QAAQ,CAAC,EAAE;MACxCQ,KAAK,CAAC,qGAAqG,CAAC;MAC5G;;IAGF,MAAMC,IAAI,GAAG;MACXX,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBC,QAAQ,EAAE,IAAI,CAACA;KAChB;IAED;IACA,IAAI,CAACL,WAAW,CAACa,QAAQ,CAACD,IAAI,CAAC,CAACE,SAAS,CACvCC,QAAQ,IAAG;MACTC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,QAAQ,CAAC;MACrD,IAAI,CAAChB,MAAM,CAACmB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC,EACDC,KAAK,IAAG;MACNH,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C;IACF,CAAC,CACF;EACH;CACD;;AApEYtB,iBAAiB,GAAAuB,UAAA,EAL7BxB,SAAS,CAAC;EACTyB,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,C,EACW1B,iBAAiB,CAoE7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}