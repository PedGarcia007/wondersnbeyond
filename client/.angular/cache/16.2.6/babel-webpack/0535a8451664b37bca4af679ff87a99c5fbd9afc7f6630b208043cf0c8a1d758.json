{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SpellShareService {\n  constructor(http) {\n    this.http = http;\n    this.API_URL = 'http://localhost:3000/spellShares'; // Adjust the URL as per your setup\n  }\n  // Fetch all spell shares\n  getAllSpellShares() {\n    return this.http.get(this.API_URL);\n  }\n  // Create a new spell share\n  createSpellShare(spellShare) {\n    return this.http.post(this.API_URL, spellShare);\n  }\n  // Get a specific spell share by ID\n  getSpellShareById(id) {\n    return this.http.get(`${this.API_URL}/${id}`);\n  }\n  // Update a specific spell share by ID\n  updateSpellShare(id, spellShare) {\n    return this.http.put(`${this.API_URL}/${id}`, spellShare);\n  }\n  // Delete a specific spell share by ID\n  deleteSpellShare(id) {\n    return this.http.delete(`${this.API_URL}/${id}`);\n  }\n  static #_ = this.ɵfac = function SpellShareService_Factory(t) {\n    return new (t || SpellShareService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SpellShareService,\n    factory: SpellShareService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["SpellShareService","constructor","http","API_URL","getAllSpellShares","get","createSpellShare","spellShare","post","getSpellShareById","id","updateSpellShare","put","deleteSpellShare","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\pedga\\OneDrive\\Desktop\\Test\\wondersnbeyond\\client\\src\\app\\services\\spellShare.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface SpellShare {\r\n  username: string;\r\n  post: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SpellShareService {\r\n\r\n  private readonly API_URL = 'http://localhost:3000/spellShares'; // Adjust the URL as per your setup\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Fetch all spell shares\r\n  getAllSpellShares(): Observable<SpellShare[]> {\r\n    return this.http.get<SpellShare[]>(this.API_URL);\r\n  }\r\n\r\n  // Create a new spell share\r\n  createSpellShare(spellShare: SpellShare): Observable<SpellShare> {\r\n    return this.http.post<SpellShare>(this.API_URL, spellShare);\r\n  }\r\n\r\n  // Get a specific spell share by ID\r\n  getSpellShareById(id: string): Observable<SpellShare> {\r\n    return this.http.get<SpellShare>(`${this.API_URL}/${id}`);\r\n  }\r\n\r\n  // Update a specific spell share by ID\r\n  updateSpellShare(id: string, spellShare: SpellShare): Observable<SpellShare> {\r\n    return this.http.put<SpellShare>(`${this.API_URL}/${id}`, spellShare);\r\n  }\r\n\r\n  // Delete a specific spell share by ID\r\n  deleteSpellShare(id: string): Observable<void> {\r\n    return this.http.delete<void>(`${this.API_URL}/${id}`);\r\n  }\r\n\r\n}\r\n"],"mappings":";;AAYA,OAAM,MAAOA,iBAAiB;EAI5BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,mCAAmC,CAAC,CAAC;EAExB;EAExC;EACAC,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAe,IAAI,CAACF,OAAO,CAAC;EAClD;EAEA;EACAG,gBAAgBA,CAACC,UAAsB;IACrC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAa,IAAI,CAACL,OAAO,EAAEI,UAAU,CAAC;EAC7D;EAEA;EACAE,iBAAiBA,CAACC,EAAU;IAC1B,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAa,GAAG,IAAI,CAACF,OAAO,IAAIO,EAAE,EAAE,CAAC;EAC3D;EAEA;EACAC,gBAAgBA,CAACD,EAAU,EAAEH,UAAsB;IACjD,OAAO,IAAI,CAACL,IAAI,CAACU,GAAG,CAAa,GAAG,IAAI,CAACT,OAAO,IAAIO,EAAE,EAAE,EAAEH,UAAU,CAAC;EACvE;EAEA;EACAM,gBAAgBA,CAACH,EAAU;IACzB,OAAO,IAAI,CAACR,IAAI,CAACY,MAAM,CAAO,GAAG,IAAI,CAACX,OAAO,IAAIO,EAAE,EAAE,CAAC;EACxD;EAAC,QAAAK,CAAA,G;qBA7BUf,iBAAiB,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAjBpB,iBAAiB;IAAAqB,OAAA,EAAjBrB,iBAAiB,CAAAsB,IAAA;IAAAC,UAAA,EAFhB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}