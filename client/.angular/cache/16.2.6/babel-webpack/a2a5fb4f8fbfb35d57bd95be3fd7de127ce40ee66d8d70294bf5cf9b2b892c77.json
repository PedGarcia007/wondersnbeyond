{"ast":null,"code":"import { of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.isLogged = false; // Just for simulation, in a real app, you would validate against an API.\n  }\n\n  authenticate(username, password) {\n    // Simulating authentication. In real-world, you'd make an HTTP request to your backend API.\n    if (username && password) {\n      this.isLogged = true; // Set to true if username and password provided, just for demo.\n      return of({\n        success: true\n      }).pipe(tap(_ => console.log('Authentication success')), catchError(this.handleError('authenticate')));\n    } else {\n      this.isLogged = false;\n      return of({\n        success: false\n      }).pipe(tap(_ => console.log('Authentication failure')), catchError(this.handleError('authenticate')));\n    }\n  }\n  register(user) {\n    // Simulate registration. In the real world, you would make an HTTP POST request to register the user.\n    return this.http.post('/api/register', user).pipe(tap(_ => console.log('Registration success')), catchError(this.handleError('register')));\n  }\n  logout() {\n    this.isLogged = false; // Reset the logged in status\n  }\n\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.error(error);\n      console.log(`${operation} failed: ${error.message}`);\n      return of(result);\n    };\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["of","tap","catchError","AuthService","constructor","http","isLogged","authenticate","username","password","success","pipe","_","console","log","handleError","register","user","post","logout","operation","result","error","message","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\pedga\\OneDrive\\Desktop\\Test\\wondersnbeyond\\client\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  isLogged: boolean = false; // Just for simulation, in a real app, you would validate against an API.\n\n  constructor(private http: HttpClient) {}\n\n  authenticate(username: string, password: string): Observable<any> {\n    // Simulating authentication. In real-world, you'd make an HTTP request to your backend API.\n    if (username && password) {\n      this.isLogged = true; // Set to true if username and password provided, just for demo.\n      return of({ success: true }).pipe(\n        tap(_ => console.log('Authentication success')),\n        catchError(this.handleError<any>('authenticate'))\n      );\n    } else {\n      this.isLogged = false;\n      return of({ success: false }).pipe(\n        tap(_ => console.log('Authentication failure')),\n        catchError(this.handleError<any>('authenticate'))\n      );\n    }\n  }\n\n  register(user: any): Observable<any> {\n    // Simulate registration. In the real world, you would make an HTTP POST request to register the user.\n    return this.http.post('/api/register', user).pipe(\n      tap(_ => console.log('Registration success')),\n      catchError(this.handleError<any>('register'))\n    );\n  }\n\n  logout(): void {\n    this.isLogged = false; // Reset the logged in status\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error);\n      console.log(`${operation} failed: ${error.message}`);\n      return of(result as T);\n    };\n  }\n}\n"],"mappings":"AACA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;;;AAMhD,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,QAAQ,GAAY,KAAK,CAAC,CAAC;EAEY;;EAEvCC,YAAYA,CAACC,QAAgB,EAAEC,QAAgB;IAC7C;IACA,IAAID,QAAQ,IAAIC,QAAQ,EAAE;MACxB,IAAI,CAACH,QAAQ,GAAG,IAAI,CAAC,CAAC;MACtB,OAAON,EAAE,CAAC;QAAEU,OAAO,EAAE;MAAI,CAAE,CAAC,CAACC,IAAI,CAC/BV,GAAG,CAACW,CAAC,IAAIC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC,CAAC,EAC/CZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAM,cAAc,CAAC,CAAC,CAClD;KACF,MAAM;MACL,IAAI,CAACT,QAAQ,GAAG,KAAK;MACrB,OAAON,EAAE,CAAC;QAAEU,OAAO,EAAE;MAAK,CAAE,CAAC,CAACC,IAAI,CAChCV,GAAG,CAACW,CAAC,IAAIC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC,CAAC,EAC/CZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAM,cAAc,CAAC,CAAC,CAClD;;EAEL;EAEAC,QAAQA,CAACC,IAAS;IAChB;IACA,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAC,eAAe,EAAED,IAAI,CAAC,CAACN,IAAI,CAC/CV,GAAG,CAACW,CAAC,IAAIC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC,CAAC,EAC7CZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAM,UAAU,CAAC,CAAC,CAC9C;EACH;EAEAI,MAAMA,CAAA;IACJ,IAAI,CAACb,QAAQ,GAAG,KAAK,CAAC,CAAC;EACzB;;EAEQS,WAAWA,CAAIK,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MACnCT,OAAO,CAACS,KAAK,CAACA,KAAK,CAAC;MACpBT,OAAO,CAACC,GAAG,CAAC,GAAGM,SAAS,YAAYE,KAAK,CAACC,OAAO,EAAE,CAAC;MACpD,OAAOvB,EAAE,CAACqB,MAAW,CAAC;IACxB,CAAC;EACH;EAAC,QAAAT,CAAA,G;qBAzCUT,WAAW,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXzB,WAAW;IAAA0B,OAAA,EAAX1B,WAAW,CAAA2B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}