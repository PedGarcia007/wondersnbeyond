{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:3000';\n    this.tokenKey = 'jwt_token';\n  } // Ensure you have the HttpClient injected here\n  get token() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  set token(value) {\n    if (value) {\n      localStorage.setItem(this.tokenKey, value);\n    } else {\n      localStorage.removeItem(this.tokenKey);\n    }\n  }\n  get isLogged() {\n    return !!this.token;\n  }\n  register(user) {\n    return this.http.post(`${this.baseUrl}/api/users/register`, user);\n  }\n  authenticate(username, password) {\n    const url = `${this.baseUrl}/api/users/login`;\n    return this.http.post(url, {\n      username,\n      password\n    }).pipe(tap(response => {\n      console.log('Login Response:', response);\n      if (response && response.success && response.token) {\n        console.log('Storing JWT token');\n        this.token = response.token;\n      } else {\n        console.log('Removing JWT token');\n        this.token = null;\n      }\n    }));\n  }\n  logout() {\n    this.token = null;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["tap","AuthService","constructor","http","baseUrl","tokenKey","token","localStorage","getItem","value","setItem","removeItem","isLogged","register","user","post","authenticate","username","password","url","pipe","response","console","log","success","logout","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\pedga\\OneDrive\\Desktop\\Test\\wondersnbeyond\\client\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\ninterface LoginResponse {\n  success: boolean;\n  token?: string;\n  message?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private baseUrl = 'http://localhost:3000';\n  private tokenKey = 'jwt_token';\n\n  constructor(private http: HttpClient) {}  // Ensure you have the HttpClient injected here\n\n  get token(): string | null {\n    return localStorage.getItem(this.tokenKey);\n  }\n\n  set token(value: string | null) {\n    if (value) {\n      localStorage.setItem(this.tokenKey, value);\n    } else {\n      localStorage.removeItem(this.tokenKey);\n    }\n  }\n\n  get isLogged(): boolean {\n    return !!this.token; \n  }\n\n  register(user: any): Observable<any> {\n    return this.http.post(`${this.baseUrl}/api/users/register`, user);\n  }\n\n  authenticate(username: string, password: string): Observable<LoginResponse> {\n    const url = `${this.baseUrl}/api/users/login`;\n    return this.http.post<LoginResponse>(url, { username, password }).pipe(\n      tap((response) => {\n        console.log('Login Response:', response);\n        if (response && response.success && response.token) {\n          console.log('Storing JWT token');\n          this.token = response.token; \n        } else {\n          console.log('Removing JWT token');\n          this.token = null; \n        }\n      })\n    );\n  }\n\n  logout(): void {\n    this.token = null; \n  }\n}"],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;AAWpC,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,OAAO,GAAG,uBAAuB;IACjC,KAAAC,QAAQ,GAAG,WAAW;EAES,CAAC,CAAE;EAE1C,IAAIC,KAAKA,CAAA;IACP,OAAOC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACH,QAAQ,CAAC;EAC5C;EAEA,IAAIC,KAAKA,CAACG,KAAoB;IAC5B,IAAIA,KAAK,EAAE;MACTF,YAAY,CAACG,OAAO,CAAC,IAAI,CAACL,QAAQ,EAAEI,KAAK,CAAC;KAC3C,MAAM;MACLF,YAAY,CAACI,UAAU,CAAC,IAAI,CAACN,QAAQ,CAAC;;EAE1C;EAEA,IAAIO,QAAQA,CAAA;IACV,OAAO,CAAC,CAAC,IAAI,CAACN,KAAK;EACrB;EAEAO,QAAQA,CAACC,IAAS;IAChB,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAC,GAAG,IAAI,CAACX,OAAO,qBAAqB,EAAEU,IAAI,CAAC;EACnE;EAEAE,YAAYA,CAACC,QAAgB,EAAEC,QAAgB;IAC7C,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACf,OAAO,kBAAkB;IAC7C,OAAO,IAAI,CAACD,IAAI,CAACY,IAAI,CAAgBI,GAAG,EAAE;MAAEF,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAACE,IAAI,CACpEpB,GAAG,CAAEqB,QAAQ,IAAI;MACfC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,QAAQ,CAAC;MACxC,IAAIA,QAAQ,IAAIA,QAAQ,CAACG,OAAO,IAAIH,QAAQ,CAACf,KAAK,EAAE;QAClDgB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;QAChC,IAAI,CAACjB,KAAK,GAAGe,QAAQ,CAACf,KAAK;OAC5B,MAAM;QACLgB,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;QACjC,IAAI,CAACjB,KAAK,GAAG,IAAI;;IAErB,CAAC,CAAC,CACH;EACH;EAEAmB,MAAMA,CAAA;IACJ,IAAI,CAACnB,KAAK,GAAG,IAAI;EACnB;EAAC,QAAAoB,CAAA,G;qBA5CUzB,WAAW,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX9B,WAAW;IAAA+B,OAAA,EAAX/B,WAAW,CAAAgC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}