{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.isAuthenticated = false;\n    this.baseUrl = 'http://localhost:3000'; // Adjust if needed\n    this.isAuthenticated = !!localStorage.getItem('isAuthenticated');\n  }\n  // Getter to return the isAuthenticated value\n  get isLogged() {\n    return this.isAuthenticated;\n  }\n  register(user) {\n    return this.http.post(`${this.baseUrl}/api/users/register`, user);\n  }\n  authenticate(username, password) {\n    const url = `${this.baseUrl}/api/users/login`;\n    return this.http.post(url, {\n      username,\n      password\n    }).pipe(tap(response => {\n      console.log('Login Response:', response);\n      if (response && response.success) {\n        console.log('Setting isAuthenticated to true');\n        this.isAuthenticated = true;\n        localStorage.setItem('isAuthenticated', 'true');\n      } else {\n        console.log('Setting isAuthenticated to false');\n        this.isAuthenticated = false;\n        localStorage.removeItem('isAuthenticated');\n      }\n    }));\n  }\n  logout() {\n    this.isAuthenticated = false;\n    localStorage.removeItem('isAuthenticated');\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["tap","AuthService","constructor","http","isAuthenticated","baseUrl","localStorage","getItem","isLogged","register","user","post","authenticate","username","password","url","pipe","response","console","log","success","setItem","removeItem","logout","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\pedga\\OneDrive\\Desktop\\Test\\wondersnbeyond\\client\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\ninterface LoginResponse {\n  success: boolean;\n  token?: string;\n  message?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private isAuthenticated = false;\n  private baseUrl = 'http://localhost:3000';  // Adjust if needed\n\n  constructor(private http: HttpClient) {\n    this.isAuthenticated = !!localStorage.getItem('isAuthenticated');\n  }\n\n  // Getter to return the isAuthenticated value\n  get isLogged(): boolean {\n    return this.isAuthenticated;\n  }\n\n  register(user: any): Observable<any> {\n    return this.http.post(`${this.baseUrl}/api/users/register`, user);\n  }\n\n  authenticate(username: string, password: string): Observable<LoginResponse> {\n    const url = `${this.baseUrl}/api/users/login`;\n    return this.http.post<LoginResponse>(url, { username, password }).pipe(\n      tap((response) => {\n        console.log('Login Response:', response);\n        if (response && response.success) {\n            console.log('Setting isAuthenticated to true');\n            this.isAuthenticated = true;\n            localStorage.setItem('isAuthenticated', 'true');\n        } else {\n            console.log('Setting isAuthenticated to false');\n            this.isAuthenticated = false;\n            localStorage.removeItem('isAuthenticated');\n        }\n      })\n    );\n  }\n\n  logout(): void {\n    this.isAuthenticated = false;\n    localStorage.removeItem('isAuthenticated');\n  }\n}\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;AAWpC,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,eAAe,GAAG,KAAK;IACvB,KAAAC,OAAO,GAAG,uBAAuB,CAAC,CAAE;IAG1C,IAAI,CAACD,eAAe,GAAG,CAAC,CAACE,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;EAClE;EAEA;EACA,IAAIC,QAAQA,CAAA;IACV,OAAO,IAAI,CAACJ,eAAe;EAC7B;EAEAK,QAAQA,CAACC,IAAS;IAChB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,GAAG,IAAI,CAACN,OAAO,qBAAqB,EAAEK,IAAI,CAAC;EACnE;EAEAE,YAAYA,CAACC,QAAgB,EAAEC,QAAgB;IAC7C,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACV,OAAO,kBAAkB;IAC7C,OAAO,IAAI,CAACF,IAAI,CAACQ,IAAI,CAAgBI,GAAG,EAAE;MAAEF,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAACE,IAAI,CACpEhB,GAAG,CAAEiB,QAAQ,IAAI;MACfC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,QAAQ,CAAC;MACxC,IAAIA,QAAQ,IAAIA,QAAQ,CAACG,OAAO,EAAE;QAC9BF,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;QAC9C,IAAI,CAACf,eAAe,GAAG,IAAI;QAC3BE,YAAY,CAACe,OAAO,CAAC,iBAAiB,EAAE,MAAM,CAAC;OAClD,MAAM;QACHH,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;QAC/C,IAAI,CAACf,eAAe,GAAG,KAAK;QAC5BE,YAAY,CAACgB,UAAU,CAAC,iBAAiB,CAAC;;IAEhD,CAAC,CAAC,CACH;EACH;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACnB,eAAe,GAAG,KAAK;IAC5BE,YAAY,CAACgB,UAAU,CAAC,iBAAiB,CAAC;EAC5C;EAAC,QAAAE,CAAA,G;qBAtCUvB,WAAW,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX5B,WAAW;IAAA6B,OAAA,EAAX7B,WAAW,CAAA8B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}